name: Image Conversion

on:
  # ÊâãÂãïÂÆüË°åÂèØËÉΩ
  workflow_dispatch:
    inputs:
      pets_data:
        description: 'JSON array of pets to convert (optional)'
        required: false
        type: string
      batch_id:
        description: 'Batch ID for this conversion'
        required: false
        type: string
      source:
        description: 'Source of request (screenshot-capture, manual, api)'
        required: false
        default: 'manual'
        type: string
      limit:
        description: 'Number of pets to process (for API fetch)'
        required: false
        default: '50'
        type: string
      conversion_mode:
        description: 'Conversion mode: all, missing-webp, missing-jpeg'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - missing-webp
          - missing-jpeg

  # ÂÆöÊúüÂÆüË°å„ÅØÂâäÈô§ - DispatcherÁµåÁî±„Åß„ÅÆ„ÅøÂÆüË°å
  # schedule:
  #   - cron: '0 3 * * *'

jobs:
  convert-images:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          npm install sharp @aws-sdk/client-s3

      - name: Prepare conversion list
        id: prepare-list
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # ÂÖ•Âäõ„Éá„Éº„Çø„ÅÆÊ∫ñÂÇô
          if [ -n "${{ github.event.inputs.pets_data }}" ]; then
            echo 'Using provided pets data...'
            echo '${{ github.event.inputs.pets_data }}' > conversion_list.json
            PET_COUNT=$(echo '${{ github.event.inputs.pets_data }}' | jq 'length')

            # „Éê„ÉÉ„ÉÅID„Åã„ÇâÊ§úË®ºÔºàScreenshot->Conversion„ÅÆÈÄ£Êê∫ÊôÇÔºâ
            if [ -n "${{ github.event.inputs.batch_id }}" ]; then
              echo "Verifying screenshot completion for batch..."
              STATE=$(curl -s "${API_URL}/api/crawler/get-state/${{ github.event.inputs.batch_id }}" \
                -H "X-API-Key: ${API_KEY}")

              if echo "$STATE" | jq -e '.checkpoint' > /dev/null; then
                SCREENSHOT_COUNT=$(echo "$STATE" | jq -r '.checkpoint.screenshotQueue.sent')
                CONVERSION_PENDING=$(echo "$STATE" | jq -r '.checkpoint.conversionQueue.pending | length')

                echo "üìä Screenshot completed: ${SCREENSHOT_COUNT}, Pending conversion: ${CONVERSION_PENDING}"

                if [ "$SCREENSHOT_COUNT" != "$CONVERSION_PENDING" ]; then
                  echo "‚ö†Ô∏è Warning: Count mismatch between screenshots and pending conversions"
                fi
              fi
            fi
          else
            echo 'Fetching unconverted images from R2/API...'

            # R2„Åã„ÇâÊú™Â§âÊèõÁîªÂÉè„ÇíÊ§úÂá∫„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å
            node scripts/dispatcher/detect-unconverted-images.js \
              --mode="${{ github.event.inputs.conversion_mode || 'all' }}" \
              --limit="${{ github.event.inputs.limit || 50 }}" \
              --output="conversion_list.json"

            PET_COUNT=$(jq 'length' conversion_list.json)
          fi

          echo "pet_count=${PET_COUNT}" >> $GITHUB_OUTPUT
          echo "Found ${PET_COUNT} images to convert"

      - name: Convert images
        id: convert-images
        if: steps.prepare-list.outputs.pet_count > 0
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # ÁîªÂÉèÂ§âÊèõ„ÇíÂÆüË°åÔºà„É™„Éà„É©„Ç§‰ªò„ÅçÔºâ
          BATCH_ID="${{ github.event.inputs.batch_id || format('convert-{0}', github.run_id) }}"
          MODE="${{ github.event.inputs.conversion_mode || 'all' }}"

          node scripts/dispatcher/image-converter.js \
            --input-file="conversion_list.json" \
            --batch-id="${BATCH_ID}" \
            --mode="${MODE}" \
            --max-retries=3

          # ÊàêÂäü„Åó„ÅüÂ§âÊèõÊï∞„Çí‰øùÂ≠ò
          if [ -f "scripts/logs/conversion-results.json" ]; then
            SUCCESS_COUNT=$(cat scripts/logs/conversion-results.json | jq '.successful')
            echo "conversion_success_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "conversion_success_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Convert additional images if capacity available
        id: convert-additional
        if: steps.prepare-list.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # Âá¶ÁêÜÊ∏à„ÅøÊï∞„Å®limit„ÇíÊØîËºÉ
          PROCESSED_COUNT=${{ steps.prepare-list.outputs.pet_count }}
          LIMIT=${{ github.event.inputs.limit || 50 }}
          REMAINING=$((LIMIT - PROCESSED_COUNT))
          MODE="${{ github.event.inputs.conversion_mode || 'all' }}"

          if [ $REMAINING -gt 0 ]; then
            echo "üìä Capacity available: $REMAINING slots"

            # Â§±Êïó„Åó„Åü„Éö„ÉÉ„ÉàID„ÇíÊäΩÂá∫Ôºà„Çπ„Ç≠„ÉÉ„Éó„É™„Çπ„Éà‰ΩúÊàêÔºâ
            SKIP_IDS=""
            if [ -f "scripts/logs/conversion-results.json" ]; then
              # Â§±Êïó„Åó„Åü„Éö„ÉÉ„ÉàID„Çí„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÂèñÂæó
              SKIP_IDS=$(jq -r '[.results[] | select(.success == false) | .pet_id] | join(",")' scripts/logs/conversion-results.json)
            fi

            echo "üì• Fetching additional pets for conversion..."

            # detect-unconverted-images.js„ÅßËøΩÂä†„Éö„ÉÉ„Éà„ÇíÊ§úÂá∫
            node scripts/dispatcher/detect-unconverted-images.js \
              --mode="${MODE}" \
              --limit="${REMAINING}" \
              --output="additional_conversion_list.json" \
              --skip-ids="${SKIP_IDS}"

            ADDITIONAL_COUNT=$(jq 'length' additional_conversion_list.json)

            if [ $ADDITIONAL_COUNT -gt 0 ]; then
              echo "üì∏ Processing $ADDITIONAL_COUNT additional images..."

              # ËøΩÂä†„Éö„ÉÉ„Éà„ÇíÂá¶ÁêÜÔºàÂêå„Åò„Åè„É™„Éà„É©„Ç§‰ªò„ÅçÔºâ
              BATCH_ID="${{ github.event.inputs.batch_id || format('convert-{0}', github.run_id) }}"
              node scripts/dispatcher/image-converter.js \
                --input-file="additional_conversion_list.json" \
                --batch-id="${BATCH_ID}-additional" \
                --mode="${MODE}" \
                --max-retries=3 \
                --append-results=true

              # Êõ¥Êñ∞„Åï„Çå„ÅüÊàêÂäüÊï∞„Çí‰øùÂ≠ò
              if [ -f "scripts/logs/conversion-results.json" ]; then
                TOTAL_SUCCESS=$(cat scripts/logs/conversion-results.json | jq '.successful')
                echo "total_success_count=${TOTAL_SUCCESS}" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ÑπÔ∏è No additional images available for conversion"
            fi
          else
            echo "‚úÖ Batch limit reached, no additional processing needed"
          fi

      - name: Update hasWebp flags in database
        if: steps.prepare-list.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          RESULTS_FILE="scripts/logs/conversion-results.json"

          if [ -f "$RESULTS_FILE" ]; then
            echo "=== Updating hasWebp flags in database ==="

            # ÊàêÂäü„Åó„ÅüÂ§âÊèõ„ÅÆ„Éö„ÉÉ„ÉàÊÉÖÂ†±„ÇíÊäΩÂá∫ÔºàWebPÂ§âÊèõ„ÅåÊàêÂäü„Åó„Åü„ÇÇ„ÅÆÔºâ
            SUCCESSFUL_PETS=$(cat "$RESULTS_FILE" | jq '[.results[] | select(.success == true and .webpSize > 0) | {
              id: .pet_id,
              type: .pet_type
            }]')

            PETS_COUNT=$(echo "$SUCCESSFUL_PETS" | jq 'length')

            if [ "$PETS_COUNT" -gt 0 ]; then
              echo "üì§ Updating hasWebp flag for $PETS_COUNT pets in database"

              # API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÂëº„Å≥Âá∫„Åó„Å¶hasWebp„Éï„É©„Ç∞„ÇíÊõ¥Êñ∞
              UPDATE_RESPONSE=$(curl -s -X PUT "${API_URL}/api/pets/update-image-flags" \
                -H "Content-Type: application/json" \
                -H "X-API-Key: ${API_KEY}" \
                -d "{
                  \"pets\": $SUCCESSFUL_PETS,
                  \"flagType\": \"hasWebp\"
                }")

              echo "Update response: $UPDATE_RESPONSE"

              if echo "$UPDATE_RESPONSE" | jq -e '.success' > /dev/null; then
                UPDATED_COUNT=$(echo "$UPDATE_RESPONSE" | jq -r '.data.updated')
                echo "‚úÖ Successfully updated hasWebp flag for $UPDATED_COUNT pets"
              else
                echo "‚ö†Ô∏è Failed to update hasWebp flags in database"
                echo "$UPDATE_RESPONSE"
              fi
            fi
          else
            echo "‚ö†Ô∏è No results file found"
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conversion-logs-${{ github.run_id }}
          path: |
            scripts/logs/
            conversion_list.json
          retention-days: 7

      - name: Update crawler state for conversion
        if: steps.prepare-list.outputs.pet_count > 0 && github.event.inputs.batch_id
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          RESULTS_FILE="scripts/logs/conversion-results.json"

          if [ -f "$RESULTS_FILE" ]; then
            # ÊàêÂäü„Åó„ÅüÂ§âÊèõ„ÅÆ„Éö„ÉÉ„ÉàID„ÇíÂèéÈõÜ
            SUCCESS_IDS=$(cat "$RESULTS_FILE" | \
              jq -c '[.results[] | select(.success == true and .webpSize > 0) | .pet_id]')
            SUCCESS_COUNT=$(echo "$SUCCESS_IDS" | jq 'length')

            echo "üì§ Updating crawler state for conversion stage"

            # crawler_states„ÇíÊõ¥Êñ∞
            UPDATE_RESPONSE=$(curl -s -X POST "${API_URL}/api/crawler/update-state" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"batchId\": \"${{ github.event.inputs.batch_id }}\",
                \"stage\": \"conversion\",
                \"successCount\": ${SUCCESS_COUNT},
                \"successIds\": ${SUCCESS_IDS}
              }")

            if echo "$UPDATE_RESPONSE" | jq -e '.success' > /dev/null; then
              echo "‚úÖ Successfully updated crawler state for conversion"
            else
              echo "‚ö†Ô∏è Failed to update crawler state"
              echo "$UPDATE_RESPONSE"
            fi
          fi

      - name: Summary
        if: steps.prepare-list.outputs.pet_count > 0
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # ÊúÄÁµÇÁµêÊûú„ÇíË™≠„ÅøËæº„Åø
          if [ -f "scripts/logs/conversion-results.json" ]; then
            TOTAL_PROCESSED=$(jq '.totalProcessed' scripts/logs/conversion-results.json)
            TOTAL_SUCCESS=$(jq '.successful' scripts/logs/conversion-results.json)
            TOTAL_FAILED=$(jq '.failed' scripts/logs/conversion-results.json)

            echo "‚úÖ Image conversion completed"
            echo "üìä Total processed: ${TOTAL_PROCESSED}"
            echo "  ‚úÖ Successful: ${TOTAL_SUCCESS}"
            echo "  ‚ùå Failed: ${TOTAL_FAILED}"

            # „É™„Éà„É©„Ç§Áµ±Ë®à
            RETRIED_COUNT=$(jq '[.results[] | select(.success and .attempts > 1)] | length' scripts/logs/conversion-results.json 2>/dev/null || echo "0")
            if [ "$RETRIED_COUNT" -gt 0 ]; then
              echo "  üîÑ Succeeded with retries: ${RETRIED_COUNT}"
            fi

            # ËøΩÂä†Âá¶ÁêÜ„ÅÆÁµ±Ë®à
            if [ -n "${{ steps.convert-additional.outputs.total_success_count }}" ]; then
              INITIAL_COUNT=${{ steps.prepare-list.outputs.pet_count }}
              ADDITIONAL_COUNT=$((TOTAL_PROCESSED - INITIAL_COUNT))
              if [ $ADDITIONAL_COUNT -gt 0 ]; then
                echo "  üìà Additional images processed: ${ADDITIONAL_COUNT}"
              fi
            fi

            # „Çµ„Ç§„Ç∫Áµ±Ë®à
            TOTAL_WEBP_SIZE=$(jq '[.results[] | select(.webpSize) | .webpSize] | add' scripts/logs/conversion-results.json)
            TOTAL_JPEG_SIZE=$(jq '[.results[] | select(.jpegSize) | .jpegSize] | add' scripts/logs/conversion-results.json)

            if [ "$TOTAL_WEBP_SIZE" != "null" ] && [ "$TOTAL_JPEG_SIZE" != "null" ]; then
              WEBP_MB=$(echo "scale=2; $TOTAL_WEBP_SIZE / 1048576" | bc)
              JPEG_MB=$(echo "scale=2; $TOTAL_JPEG_SIZE / 1048576" | bc)
              SAVINGS=$(echo "scale=1; 100 - ($TOTAL_WEBP_SIZE * 100 / $TOTAL_JPEG_SIZE)" | bc)
              echo "  üì¶ Total JPEG: ${JPEG_MB}MB ‚Üí WebP: ${WEBP_MB}MB (${SAVINGS}% savings)"
            fi
          else
            echo "‚úÖ Image conversion completed"
            echo "üìä Processed ${{ steps.prepare-list.outputs.pet_count }} images"
          fi

          echo "üîÑ Mode: ${{ github.event.inputs.conversion_mode || 'all' }}"
          echo "üìù Source: ${{ github.event.inputs.source || 'manual/scheduled' }}"

          # „Éê„ÉÉ„ÉÅID„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂÖ®‰Ωì„ÅÆÈÄ≤Êçó„Çµ„Éû„É™„Éº„ÇíÂèñÂæó
          if [ -n "${{ github.event.inputs.batch_id }}" ]; then
            echo ""
            echo "üìà Fetching overall progress..."
            SUMMARY=$(curl -s "${API_URL}/api/crawler/summary/${{ github.event.inputs.batch_id }}" \
              -H "X-API-Key: ${API_KEY}")

            if echo "$SUMMARY" | jq -e '.stages' > /dev/null; then
              echo "Overall Progress:"
              echo "$SUMMARY" | jq -r '
                "  - Crawled: \(.stages.crawler.total) pets",
                "  - Screenshots: \(.stages.screenshot.completed)/\(.stages.screenshot.expected) (\(.stages.screenshot.rate))",
                "  - Conversions: \(.stages.conversion.completed)/\(.stages.conversion.expected) (\(.stages.conversion.rate))"
              '
            fi
          fi
