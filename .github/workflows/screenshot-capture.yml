name: Screenshot Capture

on:
  # Dispatcher経由の呼び出しに対応
  workflow_dispatch:
    inputs:
      batch_data:
        description: 'JSON batch data from Dispatcher'
        required: false
        type: string
      batch_id:
        description: 'Batch ID from Dispatcher'
        required: false
        type: string
      limit:
        description: 'Number of pets to process'
        required: false
        default: '10'
        type: string
      trigger_conversion:
        description: 'Trigger conversion workflow after capture'
        required: false
        default: 'true'
        type: boolean

jobs:
  capture-screenshots:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            node_modules
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
      
      - name: Install dependencies
        run: |
          npm install
          npm install playwright
      
      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps
      
      - name: Prepare pets data
        id: prepare-pets
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
        run: |
          # Dispatcher経由の場合
          if [ -n "${{ github.event.inputs.batch_data }}" ]; then
            echo 'Processing data from Dispatcher...'
            echo '${{ github.event.inputs.batch_data }}' > pets_to_process.json
            PET_COUNT=$(echo '${{ github.event.inputs.batch_data }}' | jq 'length')
          else
            # 手動実行（APIから取得）
            echo 'Fetching data from API...'
            PETS_JSON=$(curl -s "${API_URL}/api/stats" | \
              jq '[.data.missingImages[0:${{ github.event.inputs.limit || 10 }}] | 
                  .[] | {id: .id, name: .name, sourceUrl: .sourceUrl, type: .type}]')
            echo "$PETS_JSON" > pets_to_process.json
            PET_COUNT=$(echo "$PETS_JSON" | jq 'length')
          fi
          
          echo "pet_count=${PET_COUNT}" >> $GITHUB_OUTPUT
          echo "Found ${PET_COUNT} pets to process"
      
      - name: Capture screenshots
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
          API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
          PUBLIC_API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
        run: |
          # スクリーンショット取得を実行
          node scripts/dispatcher/screenshot-capture.js \
            --batch-file="pets_to_process.json" \
            --batch-id="${{ github.event.inputs.batch_id || format('capture-{0}', github.run_id) }}"
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-logs-${{ github.run_id }}
          path: |
            scripts/logs/
            pets_to_process.json
          retention-days: 7
      
      - name: Trigger conversion workflow
        if: steps.prepare-pets.outputs.pet_count > 0 && (github.event.inputs.trigger_conversion == 'true' || github.event.inputs.trigger_conversion == true)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('scripts/logs/capture-results.json', 'utf8'));
            
            // 成功したペットのみを抽出
            const successfulPets = results.results
              .filter(r => r.success)
              .map(r => ({
                id: r.pet_id,
                type: r.pet_type,
                screenshotKey: r.screenshotKey
              }));
            
            if (successfulPets.length > 0) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'image-conversion.yml',
                ref: 'main',
                inputs: {
                  pets_data: JSON.stringify(successfulPets),
                  batch_id: results.batchId,
                  source: 'screenshot-capture'
                }
              });
              console.log(`✅ Triggered conversion for ${successfulPets.length} pets`);
            }
      
      - name: Summary
        if: steps.prepare-pets.outputs.pet_count > 0
        run: |
          echo "✅ Screenshot capture completed for ${{ steps.prepare-pets.outputs.pet_count }} pets"
          if [ "${{ github.event.inputs.trigger_conversion }}" == "true" ] || [ "${{ github.event.inputs.trigger_conversion }}" == true ]; then
            echo "🔄 Image conversion workflow has been triggered"
          fi