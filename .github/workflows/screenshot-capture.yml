name: Screenshot Capture

on:
  # Dispatcher経由の呼び出しに対応
  workflow_dispatch:
    inputs:
      batch_data:
        description: 'JSON batch data from Dispatcher'
        required: false
        type: string
      batch_id:
        description: 'Batch ID from Dispatcher'
        required: false
        type: string
      limit:
        description: 'Number of pets to process'
        required: false
        default: '10'
        type: string
      # trigger_conversion removed - now handled by Conversion Queue

jobs:
  capture-screenshots:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            node_modules
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          npm install
          npm install playwright

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Prepare pets data
        id: prepare-pets
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
        run: |
          # Dispatcher経由の場合
          if [ -n "${{ github.event.inputs.batch_data }}" ]; then
            echo 'Processing data from Dispatcher...'
            echo '${{ github.event.inputs.batch_data }}' > pets_to_process.json
            PET_COUNT=$(echo '${{ github.event.inputs.batch_data }}' | jq 'length')
          else
            # 手動実行（APIから取得）
            echo 'Fetching data from API...'
            PETS_JSON=$(curl -s "${API_URL}/api/stats" | \
              jq '[.data.missingImages[0:${{ github.event.inputs.limit || 10 }}] | 
                  .[] | {id: .id, name: .name, sourceUrl: .sourceUrl, type: .type}]')
            echo "$PETS_JSON" > pets_to_process.json
            PET_COUNT=$(echo "$PETS_JSON" | jq 'length')
          fi

          echo "pet_count=${PET_COUNT}" >> $GITHUB_OUTPUT
          echo "Found ${PET_COUNT} pets to process"

      - name: Capture screenshots
        id: capture-screenshots
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
          API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
          PUBLIC_API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # スクリーンショット取得を実行
          node scripts/dispatcher/screenshot-capture.js \
            --batch-file="pets_to_process.json" \
            --batch-id="${{ github.event.inputs.batch_id || format('capture-{0}', github.run_id) }}"

          # 成功したスクリーンショットのペットIDを保存
          if [ -f "scripts/logs/capture-results.json" ]; then
            SUCCESS_COUNT=$(cat scripts/logs/capture-results.json | jq '[.results[] | select(.success)] | length')
            echo "screenshot_success_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "screenshot_success_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Update hasJpeg flags in database
        if: steps.capture-screenshots.outputs.screenshot_success_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
          API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
        run: |
          # 成功したスクリーンショットのペット情報を抽出
          SUCCESSFUL_PETS=$(cat scripts/logs/capture-results.json | jq '[.results[] | select(.success) | {
            id: .pet_id,
            type: .pet_type
          }]')

          PETS_COUNT=$(echo "$SUCCESSFUL_PETS" | jq 'length')

          if [ "$PETS_COUNT" -gt 0 ]; then
            echo "📤 Updating hasJpeg flag for $PETS_COUNT pets in database"

            # APIエンドポイントを呼び出してhasJpegフラグを更新
            UPDATE_RESPONSE=$(curl -s -X PUT "${API_URL}/api/pets/update-image-flags" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"pets\": $SUCCESSFUL_PETS,
                \"flagType\": \"hasJpeg\"
              }")

            echo "Update response: $UPDATE_RESPONSE"

            if echo "$UPDATE_RESPONSE" | jq -e '.success' > /dev/null; then
              UPDATED_COUNT=$(echo "$UPDATE_RESPONSE" | jq -r '.data.updated')
              echo "✅ Successfully updated hasJpeg flag for $UPDATED_COUNT pets"
            else
              echo "⚠️ Failed to update hasJpeg flags in database"
              echo "$UPDATE_RESPONSE"
            fi
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-logs-${{ github.run_id }}
          path: |
            scripts/logs/
            pets_to_process.json
          retention-days: 7

      - name: Send screenshot results to API for conversion
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://pawmatch-api.elchika.app' }}
          API_KEY: ${{ secrets.ACTIONS_API_KEY || secrets.API_KEY_INTERNAL }}
        run: |
          # 結果ファイルを読み込み
          RESULTS=$(cat scripts/logs/capture-results.json)

          # スクリーンショット結果の配列を作成
          SCREENSHOT_RESULTS=$(echo "$RESULTS" | jq '[.results[] | {
            pet_id: .pet_id,
            pet_type: .pet_type,
            success: .success,
            screenshotKey: .screenshotKey,
            hasJpeg: (if .success then 1 else 0 end)
          }]')

          SUCCESS_COUNT=$(echo "$RESULTS" | jq '[.results[] | select(.success)] | length')
          BATCH_ID=$(echo "$RESULTS" | jq -r '.batchId')

          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "📤 Sending screenshot results to API for conversion ($SUCCESS_COUNT successful screenshots)"

            # APIのconversionエンドポイントに送信 (APIがDispatcherに転送)
            RESPONSE=$(curl -s -X POST "${API_URL}/api/conversion/screenshot" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"screenshotResults\": $SCREENSHOT_RESULTS,
                \"batchId\": \"$BATCH_ID-conversion\",
                \"source\": \"screenshot-capture\"
              }")

            echo "Response: $RESPONSE"

            if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
              CONVERSION_BATCH_ID=$(echo "$RESPONSE" | jq -r '.batchId // "N/A"')
              CONVERSION_COUNT=$(echo "$RESPONSE" | jq -r '.count // 0')
              echo "✅ Conversion triggered via API for $CONVERSION_COUNT pets (Batch ID: $CONVERSION_BATCH_ID)"
            else
              echo "⚠️ Failed to trigger conversion via API"
              echo "$RESPONSE"
            fi
          else
            echo "ℹ️ No successful screenshots to convert"
          fi

      - name: Summary
        if: steps.prepare-pets.outputs.pet_count > 0
        run: |
          echo "✅ Screenshot capture completed for ${{ steps.prepare-pets.outputs.pet_count }} pets"
          echo "📤 Conversion request sent to Dispatcher Queue"
