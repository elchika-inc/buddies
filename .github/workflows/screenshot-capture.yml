name: Screenshot Capture

on:
  # Dispatcher経由の呼び出しに対応
  workflow_dispatch:
    inputs:
      batch_data:
        description: 'JSON batch data from Dispatcher'
        required: false
        type: string
      batch_id:
        description: 'Batch ID from Dispatcher'
        required: false
        type: string
      limit:
        description: 'Number of pets to process'
        required: false
        default: '10'
        type: string
      # trigger_conversion removed - now handled by Conversion Queue

jobs:
  capture-screenshots:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Record workflow start
        id: workflow-start
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          RESPONSE=$(curl -s -X POST "${API_URL}/api/workflow/start" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${API_KEY}" \
            -d "{
              \"syncType\": \"screenshot\",
              \"metadata\": {
                \"batchId\": \"${{ github.event.inputs.batch_id }}\",
                \"githubRunId\": ${{ github.run_id }},
                \"githubRunUrl\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"workflowFile\": \"screenshot-capture.yml\",
                \"limit\": \"${{ github.event.inputs.limit || '10' }}\"
              }
            }")

          WORKFLOW_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "workflow_id=${WORKFLOW_ID}" >> $GITHUB_OUTPUT
          echo "✅ Workflow started with ID: ${WORKFLOW_ID}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            node_modules
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          npm install
          npm install playwright

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Prepare pets data
        id: prepare-pets
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
        run: |
          # Dispatcher経由の場合
          if [ -n "${{ github.event.inputs.batch_data }}" ]; then
            echo 'Processing data from Dispatcher...'
            echo '${{ github.event.inputs.batch_data }}' > pets_to_process.json
            PET_COUNT=$(echo '${{ github.event.inputs.batch_data }}' | jq 'length')

            # バッチIDから期待値を取得
            if [ -n "${{ github.event.inputs.batch_id }}" ]; then
              echo "Fetching expected count from crawler state..."
              CRAWLER_STATE=$(curl -s "${API_URL}/api/crawler/get-state/${{ github.event.inputs.batch_id }}" \
                -H "X-API-Key: ${API_KEY}")

              if echo "$CRAWLER_STATE" | jq -e '.checkpoint' > /dev/null; then
                EXPECTED_COUNT=$(echo "$CRAWLER_STATE" | jq -r '.checkpoint.totalFetched')
                echo "Expected count from crawler: ${EXPECTED_COUNT}"
                echo "expected_count=${EXPECTED_COUNT}" >> $GITHUB_OUTPUT

                if [ "$PET_COUNT" != "$EXPECTED_COUNT" ]; then
                  echo "⚠️ WARNING: Count mismatch! Expected: ${EXPECTED_COUNT}, Actual: ${PET_COUNT}"
                fi
              fi
            fi
          else
            # 手動実行（APIから取得）
            echo 'Fetching data from API...'
            PETS_JSON=$(curl -s "${API_URL}/api/stats" | \
              jq '[.data.missingImages[0:${{ github.event.inputs.limit || 10 }}] |
                  .[] | {id: .id, name: .name, sourceUrl: .sourceUrl, type: .type}]')
            echo "$PETS_JSON" > pets_to_process.json
            PET_COUNT=$(echo "$PETS_JSON" | jq 'length')
          fi

          echo "pet_count=${PET_COUNT}" >> $GITHUB_OUTPUT
          echo "Found ${PET_COUNT} pets to process"

      - name: Capture screenshots
        id: capture-screenshots
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          PUBLIC_API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # スクリーンショット取得を実行（リトライ付き）
          BATCH_ID="${{ github.event.inputs.batch_id || format('capture-{0}', github.run_id) }}"
          node scripts/dispatcher/screenshot-capture.js \
            --batch-file="pets_to_process.json" \
            --batch-id="${BATCH_ID}" \
            --max-retries=3

          # 成功したスクリーンショットのペットIDを保存
          if [ -f "scripts/logs/capture-results.json" ]; then
            SUCCESS_COUNT=$(cat scripts/logs/capture-results.json | jq '[.results[] | select(.success)] | length')
            echo "screenshot_success_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "screenshot_success_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Capture additional screenshots if capacity available
        id: capture-additional
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          PUBLIC_API_KEY: ${{ secrets.BUDDIES_API_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # 処理済み数とlimitを比較
          PROCESSED_COUNT=${{ steps.prepare-pets.outputs.pet_count }}
          LIMIT=${{ github.event.inputs.limit || 10 }}
          REMAINING=$((LIMIT - PROCESSED_COUNT))

          if [ $REMAINING -gt 0 ]; then
            echo "📊 Capacity available: $REMAINING slots"

            # 失敗したペットIDを抽出（スキップリスト作成）
            SKIP_IDS="[]"
            if [ -f "scripts/logs/capture-results.json" ]; then
              SKIP_IDS=$(jq '[.results[] | select(.success == false) | .pet_id]' scripts/logs/capture-results.json)
            fi

            # APIから追加ペットを取得（犬と猫を均等に）
            DOGS_LIMIT=$((REMAINING / 2))
            CATS_LIMIT=$((REMAINING - DOGS_LIMIT))

            # 犬の追加取得
            if [ $DOGS_LIMIT -gt 0 ]; then
              curl -s "${API_URL}/api/stats/dogs/missing-screenshots?limit=${DOGS_LIMIT}" \
                -H "X-API-Key: ${API_KEY}" | jq '.data.pets // []' > additional_dogs.json
            else
              echo "[]" > additional_dogs.json
            fi

            # 猫の追加取得
            if [ $CATS_LIMIT -gt 0 ]; then
              curl -s "${API_URL}/api/stats/cats/missing-screenshots?limit=${CATS_LIMIT}" \
                -H "X-API-Key: ${API_KEY}" | jq '.data.pets // []' > additional_cats.json
            else
              echo "[]" > additional_cats.json
            fi

            # 追加ペットリストを作成（失敗したペットを除外）
            jq -s --argjson skip "$SKIP_IDS" \
              '(.[0] + .[1]) | map(select(.id as $id | $skip | index($id) | not))' \
              additional_dogs.json additional_cats.json > additional_pets.json

            ADDITIONAL_COUNT=$(jq 'length' additional_pets.json)

            if [ $ADDITIONAL_COUNT -gt 0 ]; then
              echo "📸 Processing $ADDITIONAL_COUNT additional pets..."

              # 追加ペットを処理（同じくリトライ付き）
              BATCH_ID="${{ github.event.inputs.batch_id || format('capture-{0}', github.run_id) }}"
              node scripts/dispatcher/screenshot-capture.js \
                --batch-file="additional_pets.json" \
                --batch-id="${BATCH_ID}-additional" \
                --max-retries=3 \
                --append-results=true

              # 更新された成功数を保存
              if [ -f "scripts/logs/capture-results.json" ]; then
                TOTAL_SUCCESS=$(cat scripts/logs/capture-results.json | jq '[.results[] | select(.success)] | length')
                echo "total_success_count=${TOTAL_SUCCESS}" >> $GITHUB_OUTPUT
              fi
            else
              echo "ℹ️ No additional pets available for processing"
            fi
          else
            echo "✅ Batch limit reached, no additional processing needed"
          fi

      - name: Update hasJpeg flags in database
        if: steps.capture-screenshots.outputs.screenshot_success_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # 成功したスクリーンショットのペット情報を抽出
          SUCCESSFUL_PETS=$(cat scripts/logs/capture-results.json | jq '[.results[] | select(.success) | {
            id: .pet_id,
            type: .pet_type
          }]')

          PETS_COUNT=$(echo "$SUCCESSFUL_PETS" | jq 'length')

          if [ "$PETS_COUNT" -gt 0 ]; then
            echo "📤 Updating hasJpeg flag for $PETS_COUNT pets in database"

            # APIエンドポイントを呼び出してhasJpegフラグを更新
            UPDATE_RESPONSE=$(curl -s -X PUT "${API_URL}/api/pets/update-image-flags" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"pets\": $SUCCESSFUL_PETS,
                \"flagType\": \"hasJpeg\"
              }")

            echo "Update response: $UPDATE_RESPONSE"

            if echo "$UPDATE_RESPONSE" | jq -e '.success' > /dev/null; then
              UPDATED_COUNT=$(echo "$UPDATE_RESPONSE" | jq -r '.data.updated')
              echo "✅ Successfully updated hasJpeg flag for $UPDATED_COUNT pets"
            else
              echo "⚠️ Failed to update hasJpeg flags in database"
              echo "$UPDATE_RESPONSE"
            fi
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-logs-${{ github.run_id }}
          path: |
            scripts/logs/
            pets_to_process.json
          retention-days: 7

      - name: Send screenshot results to API for conversion
        if: steps.prepare-pets.outputs.pet_count > 0
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # 結果ファイルを読み込み
          RESULTS=$(cat scripts/logs/capture-results.json)

          # APIが期待するフォーマットに変換 (pets配列: {id, type, screenshotKey})
          PETS_FOR_CONVERSION=$(echo "$RESULTS" | jq '[.results[] | select(.success) | {
            id: .pet_id,
            type: .pet_type,
            screenshotKey: .screenshotKey
          }]')

          SUCCESS_COUNT=$(echo "$RESULTS" | jq '[.results[] | select(.success)] | length')
          BATCH_ID=$(echo "$RESULTS" | jq -r '.batchId')

          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "📤 Sending screenshot results to API for conversion ($SUCCESS_COUNT successful screenshots)"

            # APIのconversionエンドポイントに送信 (APIがDispatcherに転送)
            RESPONSE=$(curl -s -X POST "${API_URL}/api/conversion/screenshot" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"pets\": $PETS_FOR_CONVERSION,
                \"batchId\": \"$BATCH_ID-conversion\",
                \"source\": \"screenshot-capture\"
              }")

            echo "Response: $RESPONSE"

            if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
              CONVERSION_BATCH_ID=$(echo "$RESPONSE" | jq -r '.batchId // "N/A"')
              CONVERSION_COUNT=$(echo "$RESPONSE" | jq -r '.count // 0')
              echo "✅ Conversion triggered via API for $CONVERSION_COUNT pets (Batch ID: $CONVERSION_BATCH_ID)"
            else
              echo "⚠️ Failed to trigger conversion via API"
              echo "$RESPONSE"
            fi
          else
            echo "ℹ️ No successful screenshots to convert"
          fi

      - name: Update crawler state
        if: steps.prepare-pets.outputs.pet_count > 0 && github.event.inputs.batch_id
        continue-on-error: true
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # 成功したペットIDを収集
          if [ -f "scripts/logs/capture-results.json" ]; then
            SUCCESS_IDS=$(cat scripts/logs/capture-results.json | \
              jq -c '[.results[] | select(.success) | .pet_id]')
            SUCCESS_COUNT=$(echo "$SUCCESS_IDS" | jq 'length')

            echo "📤 Updating crawler state for batch ${{ github.event.inputs.batch_id }}"

            # crawler_statesを更新
            UPDATE_RESPONSE=$(curl -s -X POST "${API_URL}/api/crawler/update-state" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"batchId\": \"${{ github.event.inputs.batch_id }}\",
                \"stage\": \"screenshot\",
                \"successCount\": ${SUCCESS_COUNT},
                \"successIds\": ${SUCCESS_IDS}
              }")

            if echo "$UPDATE_RESPONSE" | jq -e '.success' > /dev/null; then
              echo "✅ Successfully updated crawler state"
            else
              echo "⚠️ Failed to update crawler state"
              echo "$UPDATE_RESPONSE"
            fi
          fi

      - name: Summary
        if: steps.prepare-pets.outputs.pet_count > 0
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # 最終結果を読み込み
          if [ -f "scripts/logs/capture-results.json" ]; then
            TOTAL_PROCESSED=$(jq '.totalProcessed' scripts/logs/capture-results.json)
            TOTAL_SUCCESS=$(jq '.successful' scripts/logs/capture-results.json)
            TOTAL_FAILED=$(jq '.failed' scripts/logs/capture-results.json)

            echo "✅ Screenshot capture completed"
            echo "📊 Total processed: ${TOTAL_PROCESSED}"
            echo "  ✅ Successful: ${TOTAL_SUCCESS}"
            echo "  ❌ Failed: ${TOTAL_FAILED}"

            # リトライ統計
            RETRIED_COUNT=$(jq '[.results[] | select(.success and .attempts > 1)] | length' scripts/logs/capture-results.json)
            if [ $RETRIED_COUNT -gt 0 ]; then
              echo "  🔄 Succeeded with retries: ${RETRIED_COUNT}"
            fi

            # 追加処理の統計
            if [ -n "${{ steps.capture-additional.outputs.total_success_count }}" ]; then
              INITIAL_COUNT=${{ steps.prepare-pets.outputs.pet_count }}
              ADDITIONAL_COUNT=$((TOTAL_PROCESSED - INITIAL_COUNT))
              if [ $ADDITIONAL_COUNT -gt 0 ]; then
                echo "  📈 Additional pets processed: ${ADDITIONAL_COUNT}"
              fi
            fi
          else
            echo "✅ Screenshot capture completed for ${{ steps.prepare-pets.outputs.pet_count }} pets"
          fi

          if [ -n "${{ steps.prepare-pets.outputs.expected_count }}" ]; then
            echo "📊 Expected from crawler: ${{ steps.prepare-pets.outputs.expected_count }}"
          fi
          echo "📤 Conversion request sent to Dispatcher Queue"

      - name: Record workflow completion
        if: always()
        env:
          API_URL: ${{ secrets.API_URL || 'https://buddies-api.elchika.app' }}
          API_KEY: ${{ secrets.BUDDIES_API_KEY }}
        run: |
          # 結果を集計
          if [ -f "scripts/logs/capture-results.json" ]; then
            TOTAL=$(jq '.totalProcessed // 0' scripts/logs/capture-results.json)
            SUCCESS=$(jq '.successful // 0' scripts/logs/capture-results.json)
            FAILED=$(jq '.failed // 0' scripts/logs/capture-results.json)
          else
            TOTAL=0
            SUCCESS=0
            FAILED=0
          fi

          # Artifacts URL
          ARTIFACTS_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # 成功/失敗に応じてエンドポイントを選択
          if [ "${{ job.status }}" == "success" ]; then
            ENDPOINT="complete"
            PAYLOAD="{
              \"totalRecords\": ${TOTAL},
              \"processedRecords\": ${SUCCESS},
              \"failedRecords\": ${FAILED}
            }"
          else
            ENDPOINT="fail"
            PAYLOAD="{
              \"errorMessage\": \"Workflow failed with status: ${{ job.status }}. Check logs at: ${ARTIFACTS_URL}\"
            }"
          fi

          # APIに記録
          curl -s -X PUT "${API_URL}/api/workflow/${{ steps.workflow-start.outputs.workflow_id }}/${ENDPOINT}" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${API_KEY}" \
            -d "$PAYLOAD"

          echo "✅ Workflow completion recorded (Status: ${{ job.status }})"
