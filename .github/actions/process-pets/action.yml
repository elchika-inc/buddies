name: 'Process Pets'
description: 'Common pet processing workflow'

inputs:
  process-type:
    description: 'Type of processing (screenshot or conversion)'
    required: true
  batch-data:
    description: 'JSON batch data'
    required: false
  batch-id:
    description: 'Batch ID for processing'
    required: false
  limit:
    description: 'Number of pets to process'
    default: '50'
    required: false
  mode:
    description: 'Conversion mode (all, missing-webp, missing-jpeg)'
    default: 'all'
    required: false
  api-url:
    description: 'API URL'
    default: 'https://buddies-api.elchika.app'
    required: false
  api-key:
    description: 'API Key'
    required: true
  r2-account-id:
    description: 'R2 Account ID'
    required: true
  r2-access-key-id:
    description: 'R2 Access Key ID'
    required: true
  r2-secret-access-key:
    description: 'R2 Secret Access Key'
    required: true
  r2-bucket-name:
    description: 'R2 Bucket Name'
    required: true

outputs:
  success-count:
    description: 'Number of successful processes'
    value: ${{ steps.process.outputs.success-count }}
  failed-count:
    description: 'Number of failed processes'
    value: ${{ steps.process.outputs.failed-count }}
  batch-id:
    description: 'Batch ID used for processing'
    value: ${{ steps.process.outputs.batch-id }}

runs:
  using: 'composite'
  steps:
    - name: Prepare pets data
      id: prepare
      shell: bash
      env:
        API_URL: ${{ inputs.api-url }}
        API_KEY: ${{ inputs.api-key }}
      run: |
        if [ -n "${{ inputs.batch-data }}" ]; then
          echo 'Using provided batch data...'
          echo '${{ inputs.batch-data }}' > pets_to_process.json
          PET_COUNT=$(echo '${{ inputs.batch-data }}' | jq 'length')
        else
          echo 'Fetching data from API...'
          if [ "${{ inputs.process-type }}" == "screenshot" ]; then
            ENDPOINT="/api/stats/missing-screenshots"
          else
            ENDPOINT="/api/stats/missing-conversions"
          fi

          curl -s "${API_URL}${ENDPOINT}?limit=${{ inputs.limit }}" \
            -H "X-API-Key: ${API_KEY}" | jq '.data.pets' > pets_to_process.json
          PET_COUNT=$(jq 'length' pets_to_process.json)
        fi

        echo "pet-count=${PET_COUNT}" >> $GITHUB_OUTPUT
        echo "Found ${PET_COUNT} pets to process"

    - name: Process pets
      id: process
      if: steps.prepare.outputs.pet-count > 0
      shell: bash
      env:
        API_URL: ${{ inputs.api-url }}
        API_KEY: ${{ inputs.api-key }}
        R2_ACCOUNT_ID: ${{ inputs.r2-account-id }}
        R2_ACCESS_KEY_ID: ${{ inputs.r2-access-key-id }}
        R2_SECRET_ACCESS_KEY: ${{ inputs.r2-secret-access-key }}
        R2_BUCKET_NAME: ${{ inputs.r2-bucket-name }}
      run: |
        BATCH_ID="${{ inputs.batch-id || format('{0}-{1}', inputs.process-type, github.run_id) }}"

        if [ "${{ inputs.process-type }}" == "screenshot" ]; then
          node scripts/dispatcher/screenshot-capture.js \
            --batch-file="pets_to_process.json" \
            --batch-id="${BATCH_ID}" \
            --max-retries=3

          RESULTS_FILE="scripts/logs/capture-results.json"
        else
          node scripts/dispatcher/image-converter.js \
            --input-file="pets_to_process.json" \
            --batch-id="${BATCH_ID}" \
            --mode="${{ inputs.mode }}" \
            --max-retries=3

          RESULTS_FILE="scripts/logs/conversion-results.json"
        fi

        if [ -f "$RESULTS_FILE" ]; then
          SUCCESS_COUNT=$(jq '.successful' "$RESULTS_FILE")
          FAILED_COUNT=$(jq '.failed' "$RESULTS_FILE")
          echo "success-count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          echo "failed-count=${FAILED_COUNT}" >> $GITHUB_OUTPUT
          echo "batch-id=${BATCH_ID}" >> $GITHUB_OUTPUT
        else
          echo "success-count=0" >> $GITHUB_OUTPUT
          echo "failed-count=0" >> $GITHUB_OUTPUT
          echo "batch-id=${BATCH_ID}" >> $GITHUB_OUTPUT
        fi

    - name: Update database flags
      if: steps.process.outputs.success-count > 0
      shell: bash
      continue-on-error: true
      env:
        API_URL: ${{ inputs.api-url }}
        API_KEY: ${{ inputs.api-key }}
      run: |
        if [ "${{ inputs.process-type }}" == "screenshot" ]; then
          RESULTS_FILE="scripts/logs/capture-results.json"
          FLAG_TYPE="hasJpeg"
        else
          RESULTS_FILE="scripts/logs/conversion-results.json"
          FLAG_TYPE="hasWebp"
        fi

        if [ -f "$RESULTS_FILE" ]; then
          SUCCESSFUL_PETS=$(jq '[.results[] | select(.success) | {
            id: .pet_id,
            type: .pet_type
          }]' "$RESULTS_FILE")

          PETS_COUNT=$(echo "$SUCCESSFUL_PETS" | jq 'length')

          if [ "$PETS_COUNT" -gt 0 ]; then
            echo "ðŸ“¤ Updating ${FLAG_TYPE} flag for ${PETS_COUNT} pets"

            curl -s -X PUT "${API_URL}/api/pets/update-image-flags" \
              -H "Content-Type: application/json" \
              -H "X-API-Key: ${API_KEY}" \
              -d "{
                \"pets\": $SUCCESSFUL_PETS,
                \"flagType\": \"${FLAG_TYPE}\"
              }"
          fi
        fi

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.process-type }}-logs-${{ github.run_id }}
        path: |
          scripts/logs/
          pets_to_process.json
        retention-days: 7
